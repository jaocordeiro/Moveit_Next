{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/joao/Documentos/developer/moveit-next/src/contexts/ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengeCompleted = _useState3[0],\n      setChallengeCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var challenges = challenges[randomChallengeIndex];\n    setActiveChallenge(challenges);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level: level,\n      currentExperience: currentExperience,\n      challengeCompleted: challengeCompleted,\n      levelUp: levelUp,\n      startNewChallenge: startNewChallenge,\n      activeChallenge: activeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChallengesProvider, \"UK3dk03suGbFwVnJmxFC0MGTnfE=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["/home/joao/Documentos/developer/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengeCompleted","setChallengeCompleted","activeChallenge","setActiveChallenge","levelUp","startNewChallenge","randomChallengeIndex","Math","floor","random","challenges","length"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAmCC,QAAnC,QAAmD,OAAnD;AAsBA,OAAO,IAAMC,iBAAiB,gBAAGF,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASG,kBAAT,OAAiE;AAAA;;AAAA,MAApCC,QAAoC,QAApCA,QAAoC;;AAAA,kBAC1CH,QAAQ,CAAC,CAAD,CADkC;AAAA,MAC7DI,KAD6D;AAAA,MACtDC,QADsD;;AAAA,mBAElBL,QAAQ,CAAC,CAAD,CAFU;AAAA,MAE7DM,iBAF6D;AAAA,MAE1CC,oBAF0C;;AAAA,mBAGhBP,QAAQ,CAAC,CAAD,CAHQ;AAAA,MAG7DQ,kBAH6D;AAAA,MAGzCC,qBAHyC;;AAAA,mBAKtBT,QAAQ,CAAC,IAAD,CALc;AAAA,MAK7DU,eAL6D;AAAA,MAK5CC,kBAL4C;;AAOpE,WAASC,OAAT,GAAmB;AACfP,IAAAA,QAAQ,CAACD,KAAK,GAAE,CAAR,CAAR;AACH;;AAED,WAASS,iBAAT,GAA6B;AACzB,QAAMC,oBAAoB,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBC,UAAU,CAACC,MAAtC,CAA7B;AACA,QAAMD,UAAU,GAAGA,UAAU,CAACJ,oBAAD,CAA7B;AAEAH,IAAAA,kBAAkB,CAACO,UAAD,CAAlB;AACH;;AAED,sBACI,QAAC,iBAAD,CAAmB,QAAnB;AACI,IAAA,KAAK,EAAE;AACHd,MAAAA,KAAK,EAALA,KADG;AAEHE,MAAAA,iBAAiB,EAAjBA,iBAFG;AAGHE,MAAAA,kBAAkB,EAAlBA,kBAHG;AAIHI,MAAAA,OAAO,EAAPA,OAJG;AAKHC,MAAAA,iBAAiB,EAAjBA,iBALG;AAMHH,MAAAA,eAAe,EAAfA;AANG,KADX;AAAA,cAUKP;AAVL;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH;;GAhCeD,kB;;KAAAA,kB","sourcesContent":["import { createContext, ReactNode, useState } from 'react';\nimport challenges from '../../challenges.json';\n\ninterface Challenges {\n    type: 'body' | 'eye';\n    description: string;\n    amount: number;\n}\n\ninterface ChallengesContextData {\n    level: number;\n    currentExperience: number;\n    challengeCompleted: number;\n    activeChallenge: Challenges;\n    levelUp: () => void;\n    startNewChallenge: () => void;\n}\n\ninterface ChallengesProviderProps {\n    children: ReactNode;\n}\n\nexport const ChallengesContext = createContext({} as ChallengesContextData);\n\nexport function ChallengesProvider({children}: ChallengesProviderProps) {\n    const [level, setLevel] = useState(1);\n    const [currentExperience, setCurrentExperience] = useState(0);\n    const [challengeCompleted, setChallengeCompleted] = useState(0);\n\n    const [activeChallenge, setActiveChallenge] = useState(null);\n\n    function levelUp() {\n        setLevel(level +1);\n    }\n\n    function startNewChallenge() {\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\n        const challenges = challenges[randomChallengeIndex];\n\n        setActiveChallenge(challenges)\n    }\n\n    return (\n        <ChallengesContext.Provider  \n            value={{\n                level,\n                currentExperience,\n                challengeCompleted,\n                levelUp,\n                startNewChallenge,\n                activeChallenge,\n            }}\n        >\n            {children}\n        </ChallengesContext.Provider>\n    );\n}"]},"metadata":{},"sourceType":"module"}